string.h
	strlen(string)


enumeration constant
An enumeration is a list of constant integer values, as in
enum boolean { NO, YES };

"External and static variables are initialized to zero by default.
Automatic variables for which there is no explicit initializer have undefined
(i.e., garbage) values."

string.h
	atoi(string)
	lower(character)

ctype.h
	isdigit(character)
	tolower(character)

math.h
	sqrt(double)


"Notice that floats in an expression are not automatically converted to
double; this is a change from the original definition. In general, mathematical
functions like those in <math. h> will use double precision. The main reason
for using float is to save storage in large arrays, or, less often, to save time on
machines where double-precision arithmetic is particularly expensive."

"C, like most languages, does not specify the order in which the operands of
an operator are evaluated. (The exceptions are ss, I I, ?:, and ','.) For
example, in a statement like"

"Similarly, the order in which function arguments are evaluated is not specified, so the statement
printf(""d %d\n", ++n, power(2, n));	* WRONG *

can produce different results with different compilers, depending on whether n is incremented before power is called. The solution, of course, is to write
++n;
printf("%d %d\n", n, power(2, n));
"

"
Function calls, nested assignment statements, and increment and decrement
operators cause "side effects" -some variable is changed as a by-product of the
evaluation of an expression. In any expression involving side effects, there can
be subtle dependencies on the order in which variables taking part in the expres-
sion are updated. One unhappy situation is typified by the statement
a[i] = i++;
The question is whether the subscript is the old value of i or the new.
"

"
The moral is that writing code that depends on order of evaluation is a bad programming practice in any language. Naturally, it is necessary to know what things to avoid, but if you don't know how they are done on various machines, you won't be tempted to take advantage of a particular implementation.
"