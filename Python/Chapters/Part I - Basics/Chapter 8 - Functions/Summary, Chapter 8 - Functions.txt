# Author: Fernando Zuher
# Place: Brazil
# Date: 18 April 2020
# Book: Python Crash Course, 2nd Edition. Author: ERIC MATTHES.
# About: Summary*, Chapter 8 - Functions

# Most of the written was taken literally from the chapter.

--------------------------------------
Functions

	The text at 2 is a comment called a docstring, which describes what the function does. Docstrings are enclosed in triple quotes, which Python looks for when it generates documentation for the functions in your programs.

-------------------------
Arguments and Parameters

	def function():
		"""Docstrings..."""
		blablabla

-------------------------------
Tipos de argumentos/parâmetros:
	Posicional
	
	Keyword
		describe_pet(animal_type='hamster', pet_name='harry')
	
	default
		def describe_pet(pet_name, animal_type='dog'):
		parâmetros default devem vir por último na lista de parâmetros da função porque Pynthon os considera posicional a despeito de passar argumento como palavra-chave.

		"When you use default values, any parameter with a default value needs to be listed after all the parameters that don’t have default values. This allows Python to continue interpreting positional arguments correctly."

----------------------------
Making an Argument Optional

		def get_formatted_name(first_name, last_name, middle_name=''):

	Python interprets non-empty strings as True, so if middle_name evaluates to True if a middle name argument is in the function call.

	None parece ser ''
	
		def build_person(first_name, last_name, age=None):

	We add a new optional parameter age to the function definition and assign the parameter the special value None, which is used when a variable has no specific value assigned to it. You can think of None as a placeholder value. In conditional tests, None evaluates to False.

	Por default mudanças feitas dentro de funções em listas passadas como parâmetros são permanentes porque as listas são passadas por referência às funções. Para passagem por cópia, deve-se acrescentar o [:] (slice notation) logo após o argumento lista passado à função.
	
		send_messages(list[:])

-----------------------------------------
Passing an Arbitrary Number of Arguments
	*tupla como parâmetro da função

		--
		def make_pizza(*toppings):
			"""Summarize the pizza we are about to make."""
			print("\nMaking a pizza with the following toppings:")
			for topping in toppings:
				print(f"- {topping}")

		make_pizza('pepperoni')
		make_pizza('mushrooms', 'green peppers', 'extra cheese')
		--

	This syntax works no matter how many arguments the function receives.

------------------------------------------
Mixing Positional and Arbitrary Arguments
	
		--
		def make_pizza(size, *toppings):
			"""Summarize the pizza we are about to make."""
			print(f"\nMaking a {size}-inch pizza with the following toppings:")
			for topping in toppings:
				print(f"- {topping}")
		
		make_pizza(16, 'pepperoni')
		make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
		--

	If you want a function to accept several different kinds of arguments, the parameter that accepts an arbitrary number of arguments must be placed last in the function definition. Python matches positional and keyword arguments first and then collects any remaining arguments in the final parameter.

	The double asterisks before the parameter **user_info cause Python to create an empty dictionary called user_info and pack whatever name-value pairs it receives into this dictionary. Within the function, you can access the key-value pairs in user_info just as you would for any dictionary.

	Note: You’ll often see the generic parameter name *args, which collects arbitrary positional arguments like this.

----------------------------------
Using Arbitrary Keyword Arguments

		--
		def build_profile(first, last, **user_info):
			"""Build a dictionary containing everything we know about a user."""
			user_info['first_name'] = first
			user_info['last_name'] = last
			return user_info

		user_profile = build_profile('albert', 'einstein',
									location='princeton',
									field='physics')
		print(user_profile)
		--


	The definition of build_profile() expects a first and last name, and then it allows the user to pass in as many name-value pairs as they want. The double asterisks before the parameter **user_info cause Python to create an empty dictionary called user_info and pack whatever name-value pairs it receives into this dictionary. Within the function, you can access the key-value pairs in user_info just as you would for any dictionary.

	You can mix positional, keyword, and arbitrary values in many different ways when writing your own functions. It’s useful to know that all these argument types exist because you’ll see them often when you start reading other people’s code. It takes practice to learn to use the different types correctly and to know when to use each type. For now, remember to use the simplest approach that gets the job done. As you progress you’ll learn to use the most efficient approach each time.

	Note: You’ll often see the parameter name **kwargs used to collect non-specific keyword arguments.

----------------------------------
Storing Your Functions in Modules

		--
		import pizza

		pizza.make_pizza(16, 'pepperoni')
		pizza.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
		--

	module_name.function_name()

	When Python reads this file, the line import pizza tells Python to open the file pizza.py and copy all the functions from it into this program. You don’t actually see code being copied between files because Python copies the code behind the scenes just before the program runs. All you need to know is that any function defined in pizza.py will now be available in making_pizzas.py.
	
	To call a function from an imported module, enter the name of the module you imported, pizza, followed by the name of the function, make_pizza(), separated by a dot u.

	-----------------------------
	Importing Specific Functions

		from module_name import function_name
		from module_name import function_0, function_1, function_2

			--
			from pizza import make_pizza

			make_pizza(16, 'pepperoni')
			make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
			--

		With this syntax, you don’t need to use the dot notation when you call a function. Because we’ve explicitly imported the function make_pizza() in the import statement, we can call it by name when we use the function.


	-------------------------------------
	Using as to Give a Function an Alias

		If the name of a function you’re importing might conflict with an existing name in your program or if the function name is long, you can use a short, unique alias—an alternate name similar to a nickname for the function. You’ll give the function this special nickname when you import the function.

		from module_name import function_name as fn

			--
			from pizza import make_pizza as mp
			
			mp(16, 'pepperoni')
			mp(12, 'mushrooms', 'green peppers', 'extra cheese')
			--

	-----------------------------------
	Using as to Give a Module an Alias

		import module_name as mn

			--
			import pizza as p
			
			p.make_pizza(16, 'pepperoni')
			p.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
			--

	------------------------------------
	Importing All Functions in a Module

			--
			from pizza import *

			make_pizza(16, 'pepperoni')
			make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')
			--

		The asterisk in the import statement tells Python to copy every function from the module pizza into this program file. Because every function is imported, you can call each function by name without using the dot notation. However, it’s best not to use this approach when you’re working with larger modules that you didn’t write: if the module has a function name that matches an existing name in your project, you can get some unexpected results. Python may see several functions or variables with the same name, and instead of importing all the functions separately, it will overwrite the functions.
		
		The best approach is to import the function or functions you want, or import the entire module and use the dot notation. This leads to clear code that’s easy to read and understand. I include this section so you’ll recognize import statements like the following when you see them in other people’s code: 

			from module_name import *

------------------
Styling Functions
	
	Every function should have a comment that explains concisely what the function does. This comment should appear immediately after the function definition and use the docstring format. In a well-documented function, other programmers can use the function by reading only the description in the docstring. They should be able to trust that the code works as described, and as long as they know the name of the function, the arguments it needs, and the kind of value it returns, they should be able to use it in their programs.

	If your program or module has more than one function, you can separate each by two blank lines to make it easier to see where one function ends and the next one begins.

	All import statements should be written at the beginning of a file. The only exception is if you use comments at the beginning of your file to describe the overall program.

