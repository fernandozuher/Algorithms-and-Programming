# Author: Fernando Zuher
# Place: Brazil
# Date: 22 March 2020
# Book: Python Crash Course, 2nd Edition. Author: ERIC MATTHES.
# About: Summary*, Chapter 6 - Dictionaries
# *Most of the written is taken literally from the chapter.

--------------------------------------

#del
alien_0 = {'color': 'green', 'points': 5}
print(alien_0)
del alien_0['points']
print(alien_0)

--------------------------------------

alien_0 = {'color': 'green', 'speed': 'slow'}
point_value = alien_0.get('points', 'No point value assigned.')
									implicit "None"
print(point_value)

If you leave out the second argument in the call to get() and the key doesn’t exist, Python will return the value None. The special value None means “no value exists.” This is not an error: it’s a special value meant to indicate the absence of a value.

--------------------------------------

.items()
	user_0 = {
		'username': 'efermi',
		'first': 'enrico',
		'last': 'fermi',
	}

	for key, value in user_0.items():
		print(f"\nKey: {key}")
		print(f"Value: {value}")

	# for k, v in user_0.items()


.keys()
	for key in user_0.keys():
		print(f"Key: {key}")

	# for k in user_0.keys():
			
.keys() #default behavior. It's the same than using just the name of the dictionary
	for key in user_0:
		print(f"Key: {key}")


.values()
print("The following languages have been mentioned:")
for language in favorite_languages.values():
	print(language.title())

--------------------------------------

set(alguma lista) #retorna lista como qualquer set: sem duplicadas
for language in set(favorite_languages.values()):
	print(language.title())

sets = {aaa, bbb, ccc, aaa, eee} # { } "set", gera dados sem duplicadas

"It’s easy to mistake sets for dictionaries because they’re both wrapped in braces. When you see braces but no key-value pairs, you’re probably looking at a set. Unlike lists and dictionaries, sets do not retain items in any specific order."

>>> languages = {'python', 'ruby', 'python', 'c'}
>>> languages
{'ruby', 'python', 'c'}

>>> languages2 = ['python', 'ruby', 'python', 'c']
>>> languages2
['python', 'ruby', 'python', 'c']
