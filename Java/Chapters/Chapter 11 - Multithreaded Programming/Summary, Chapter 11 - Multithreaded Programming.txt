/*
Author: Fernando Zuher
Place: Brazil
Date: 19 June 2020
Book: Java The Complete Reference, 11th Edition. Author: Herbert Schildt.
About: Summary*, Chapter 11 - Multithreaded Programming

* Most of the text was drawn literally from the chapter.

*/

Java provides built-in support for multithreaded programming. A multithreaded
program contains two or more parts that can run concurrently. Each part of such
a program is called a thread, and each thread defines a separate path of
execution. Thus, multithreading is a specialized form of multitasking.

...there are two distinct types
of multitasking: process-based and thread-based. It is important to understand
the difference between the two. For many readers, process-based multitasking is
the more familiar form. A process is, in essence, a program that is executing.
Thus, process-based multitasking is the feature that allows your computer to run
two or more programs concurrently. For example, process-based multitasking
enables you to run the Java compiler at the same time that you are using a text
editor or visiting a web site. In process-based multitasking, a program is the
smallest unit of code that can be dispatched by the scheduler.
In a thread-based multitasking environment, the thread is the smallest unit of
dispatchable code. This means that a single program can perform two or more
tasks simultaneously. For instance, a text editor can format text at the same time
that it is printing, as long as these two actions are being performed by two
separate threads. Thus, process-based multitasking deals with the “big picture,”
and thread-based multitasking handles the details.

Threads exist in several states. Here is a general description. A thread can be
running. It can be ready to run as soon as it gets CPU time. A running thread can
be suspended, which temporarily halts its activity. A suspended thread can then
be resumed, allowing it to pick up where it left off. A thread can be blocked
when waiting for a resource. At any time, a thread can be terminated, which
halts its execution immediately. Once terminated, a thread cannot be resumed.

Thread Priorities
	
	Java assigns to each thread a priority that determines how that thread should be
	treated with respect to the others. Thread priorities are integers that specify the
	relative priority of one thread to another. As an absolute value, a priority is
	meaningless; a higher-priority thread doesn’t run any faster than a lower-priority
	thread if it is the only thread running. Instead, a thread’s priority is used to
	decide when to switch from one running thread to the next. This is called a
	context switch.

	CAUTION Portability problems can arise from the differences in the way that operating systems context-
	switch threads of equal priority.

The Main Thread

	static void sleep(long milliseconds) throws InterruptedException

	The sleep( ) method has a second form, shown next, which allows you to
	specify the period in terms of milliseconds and nanoseconds:
	static void sleep(long milliseconds, int nanoseconds) throws
	InterruptedException
	This second form is useful only in environments that allow timing periods as
	short as nanoseconds.

	final void setName(String threadName)
	final String getName( )

Creating a Thread
	
	In the most general sense, you create a thread by instantiating an object of type
	Thread. Java defines two ways in which this can be accomplished:
		• You can implement the Runnable interface.
		• You can extend the Thread class, itself.

