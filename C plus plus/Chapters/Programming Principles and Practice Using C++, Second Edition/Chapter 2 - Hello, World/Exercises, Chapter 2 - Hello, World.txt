/*
Author: Fernando Zuher
Place: Brazil
Date: 16 January 2020
Book: The C++ Programming Language, fourth edition. Author: Bjarne Stroustrup.
About: Exercises, Chapter 2 - Hello, World!
Pages: 53 - 56

*/

Review

1. What is the purpose of the “Hello, World!” program?
    Introduce a pretty basic way of programming.

2. Name the four parts of a function.
    A return type, a name, a parameter list, a function body.

3. Name a function that must appear in every C++ program.
    int main();

4. In the “Hello, World!” program, what is the purpose of the line return 0; ?
    To return to the system who called the program with a "message" that the program terminated successfully.

5. What is the purpose of the compiler?
    To translate from a human-readable programming language to another that the computer can understand.

6. What is the purpose of the #include directive?
    To include other files in our own file in order to use them.

7. What does a .h suffix at the end of a file name signify in C++?
    That the file is a header file.

8. What does the linker do for your program?
    It links the object files of my program among them in an executable file.

9. What is the difference between a source file and an object file?
    A source file is the file where it is written a program in a particular programming language. The object file is the translation in machine language of the source file that the compiler does.

10. What is an IDE and what does it do for you?
    It is a program that allows a user to program with visual, intuitive and helpful aid as well as provides tools do debug the code.

11. If you understand everything in the textbook, why is it necessary to practice?
    ?

------------
TERMS

//
<<
C++
comment
compiler
compile-time error
cout
executable
function
header
IDE
#include
library
linker
main()
object code
output
program
source code
statement
------------

Exercises

1. Change the program to output the two lines
Hello, programming!
Here we go!

#include "../../../std_lib_facilities.h"

int main() // C++ programs start by executing the function main
{
    cout << "Hello, World!\n"; // output “Hello, World!”
    cout << "Here we go!\n";
    //keep_window_open(); // wait for a character to be entered
    return 0;
}


2. Expanding on what you have learned, write a program that lists the in-
structions for a computer to find the upstairs bathroom, discussed in §2.1.
Can you think of any more steps that a person would assume, but that a
computer would not? Add them to your list. This is a good start in “think-
ing like a computer.” Warning: For most people, “go to the bathroom” is
a perfectly adequate instruction. For someone with no experience with
houses or bathrooms (imagine a stone-age person, somehow transported
into your dining room) the list of necessary instructions could be very
long. Please don’t use more than a page. For the benefit of the reader, you
may add a short description of the layout of the house you are imagining.
    ...

3. Write a description of how to get from the front door of your dorm room,
apartment, house, whatever, to the door of your classroom (assuming you
are attending some school; if you are not, pick another target). Have a
friend try to follow the instructions and annotate them with improve-
ments as he or she goes along. To keep friends, it may be a good idea to
“field test” those instructions before giving them to a friend.
    ...

4. Find a good cookbook. Read the instructions for baking blueberry muf-
fins (if you are in a country where “blueberry muffins” is a strange, exotic
dish, use a more familiar dish instead). Please note that with a bit of
help and instruction, most of the people in the world can bake delicious
blueberry muffins. It is not considered advanced or difficult fine cooking.
However, for the author, few exercises in this book are as difficult as this
one. It is amazing what you can do with a bit of practice.
    • Rewrite those instructions so that each individual action is in its own
    numbered paragraph. Be careful to list all ingredients and all kitchen
    utensils used at each step. Be careful about crucial details, such as the
    desired oven temperature, preheating the oven, the preparation of the
    muffi n pan, the way to time the cooking, and the need to protect your
    hands when removing the muffi ns from the oven.

    • Consider those instructions from the point of view of a cooking nov-
    ice (if you are not one, get help from a friend who does not know how
    to cook). Fill in the steps that the book’s author (almost certainly an
    experienced cook) left out for being obvious.

    • Build a glossary of terms used. (What’s a muffin pan? What does
    preheating do? What do you mean by “oven”?)

    • Now bake some muffins and enjoy your results.

        ...

5. Write a definition for each of the terms from “Terms.” First try to see if you
can do it without looking at the chapter (not likely), then look through the
chapter to find definitions. You might find the difference between your
first attempt and the book’s version interesting. You might consult some
suitable online glossary, such as www.stroustrup.com/glossary.html. By
writing your own definition before looking it up, you reinforce the learn-
ing you achieved through your reading. If you have to reread a section to
form a definition, that just helps you to understand. Feel free to use your
own words for the definitions, and make the definitions as detailed as
you think reasonable. Often, an example after the main definition will be
helpful. You may like to store the definitions in a file so that you can add
to them from the “Terms” sections of later chapters.

    // : How comments are represented in C++.
    << : operator used to pass data to cout command
    C++: programming language
    comment: text not translated by compilator
    compiler: program that translates a source code to machine code
    compile-time error: error detected by the compilator during compilation of code
    cout: function that output data in the standard output stream
    executable: file in machine code ready to be execute by a computer
    function: a portion of code represented by a name that can be used as many times as wished by just calling it
    header: file that is imported to a source code in order to provide funcionalities other than the ones writen in the current code.
    IDE: program that facilitates writing source code by providing visual highlights in code, autocomplete suggestions, build and run code... as well as debugging code.
    #include: directive that allows to import an external file to a particular source code
    library: files containing source code that can be imported to any another source code
    linker: program that links the object files in an executable
    main(): function that is run in any C++ program
    object code: file that was translated from a source code to machine code
    output: It may be related to the standard output (monitor), the output by itself of a program, etc.
    program: set of instructions to be executed by a computer
    source code: code written in a human readable language
    statement: any line of code in a C++ source code that is not a directive, roughly speaking

