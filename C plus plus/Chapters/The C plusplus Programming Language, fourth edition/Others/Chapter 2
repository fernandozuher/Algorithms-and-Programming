
int d2 {2.3};
int d3 = 2.3;


complex<double> z3 = {1,2};

int i1 = 7.2;  // i1 becomes 7
int i2 {7.2};  // error : floating-point to integer conversion
int i3 = {7.2};  // error : floating-point to integer conversion (the = is redundant)


"A constant (§2.2.3) cannot be left uninitialized and a variable should only be left uninitialized in
extremely rare circumstances. Don’t introduce a name until you have a suitable value for it."

auto b = true;

"With auto , we use the = syntax because there is no type conversion involved that might cause problems (§6.3.6.2).

We use auto where we don’t hav e a specific reason to mention the type explicitly. ‘‘Specific reasons’’ include:
	• The definition is in a large scope where we want to make the type clearly visible to readers of our code.
	• We want to be explicit about a variable’s range or precision (e.g., double rather than float ).

Using auto , we avoid redundancy and writing long type names."


for (auto x : v)
	cout << x << '\n';
	// for each x in v

for (auto x : {10,21,32,43,54,65})
	cout << x << '\n';


"If we didn’t want to copy the values from v into the variable x , but rather just have x refer to an
element, we could write:
int v[] = {0,1,2,3,4,5,6,7,8,9};
for (auto& x : v)
	++x;


In a declaration, the unary suffix & means ‘‘reference to.’’ A reference is similar to a pointer,
except that you don’t need to use a prefix ∗ to access the value referred to by the reference. Also, a
reference cannot be made to refer to a different object after its initialization.

"

double∗ pd = nullptr;

"In older code, 0 or NULL is typically used instead of nullptr (§7.2.2). However, using nullptr
eliminates potential confusion between integers (such as 0 or NULL ) and pointers (such as nullptr )."


"Such a statement of what is assumed
to be true for a class is called a class invariant, or simply an invariant. It is the job of a constructor
to establish the invariant for its class (so that the member functions can rely on it) and for the mem-
ber functions to make sure that the invariant holds when they exit."

"The notion of invariants is central to the design of classes, and preconditions serve a similar role
in the design of functions. Invariants
• helps us to understand precisely what we want
• forces us to be specific; that gives us a better chance of getting our code correct (after
debugging and testing)."

